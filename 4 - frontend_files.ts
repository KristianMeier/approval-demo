

---
# frontend/package.json
{
  "name": "approval-frontend",
  "version": "1.0.0",
  "description": "Frontend til Politisk Godkendelsessystem",
  "scripts": {
    "ng": "ng",
    "start": "ng serve --host 0.0.0.0 --port 4200",
    "build": "ng build",
    "build:prod": "ng build --configuration production",
    "watch": "ng build --watch --configuration development",
    "test": "ng test",
    "lint": "ng lint"
  },
  "private": true,
  "dependencies": {
    "@angular/animations": "^17.0.0",
    "@angular/common": "^17.0.0",
    "@angular/compiler": "^17.0.0",
    "@angular/core": "^17.0.0",
    "@angular/forms": "^17.0.0",
    "@angular/platform-browser": "^17.0.0",
    "@angular/platform-browser-dynamic": "^17.0.0",
    "@angular/router": "^17.0.0",
    "rxjs": "~7.8.0",
    "tslib": "^2.3.0",
    "zone.js": "~0.14.0"
  },
  "devDependencies": {
    "@angular-devkit/build-angular": "^17.0.0",
    "@angular/cli": "^17.0.0",
    "@angular/compiler-cli": "^17.0.0",
    "typescript": "~5.2.0"
  }
}

---
# frontend/angular.json
{
  "$schema": "./node_modules/@angular/cli/lib/config/schema.json",
  "version": 1,
  "newProjectRoot": "projects",
  "projects": {
    "frontend": {
      "projectType": "application",
      "schematics": {
        "@schematics/angular:component": {
          "style": "css"
        }
      },
      "root": "",
      "sourceRoot": "src",
      "prefix": "app",
      "architect": {
        "build": {
          "builder": "@angular-devkit/build-angular:browser",
          "options": {
            "outputPath": "dist/frontend",
            "index": "src/index.html",
            "main": "src/main.ts",
            "polyfills": [],
            "tsConfig": "tsconfig.app.json",
            "assets": [
              "src/favicon.ico",
              "src/assets"
            ],
            "styles": [
              "src/styles.css"
            ],
            "scripts": []
          },
          "configurations": {
            "production": {
              "budgets": [
                {
                  "type": "initial",
                  "maximumWarning": "500kb",
                  "maximumError": "1mb"
                },
                {
                  "type": "anyComponentStyle",
                  "maximumWarning": "2kb",
                  "maximumError": "4kb"
                }
              ],
              "outputHashing": "all"
            },
            "development": {
              "buildOptimizer": false,
              "optimization": false,
              "vendorChunk": true,
              "extractLicenses": false,
              "sourceMap": true,
              "namedChunks": true
            }
          },
          "defaultConfiguration": "production"
        },
        "serve": {
          "builder": "@angular-devkit/build-angular:dev-server",
          "configurations": {
            "production": {
              "buildTarget": "frontend:build:production"
            },
            "development": {
              "buildTarget": "frontend:build:development"
            }
          },
          "defaultConfiguration": "development"
        }
      }
    }
  }
}

---
# frontend/tsconfig.json
{
  "compileOnSave": false,
  "compilerOptions": {
    "baseUrl": "./",
    "outDir": "./dist/out-tsc",
    "forceConsistentCasingInFileNames": true,
    "strict": true,
    "noImplicitOverride": true,
    "noPropertyAccessFromIndexSignature": true,
    "noImplicitReturns": true,
    "noFallthroughCasesInSwitch": true,
    "sourceMap": true,
    "declaration": false,
    "downlevelIteration": true,
    "experimentalDecorators": true,
    "moduleResolution": "node",
    "importHelpers": true,
    "target": "ES2022",
    "module": "ES2022",
    "useDefineForClassFields": false,
    "lib": [
      "ES2022",
      "dom"
    ]
  },
  "angularCompilerOptions": {
    "enableI18nLegacyMessageIdFormat": false,
    "strictInjectionParameters": true,
    "strictInputAccessModifiers": true,
    "strictTemplates": true
  }
}

---
# frontend/tsconfig.app.json
{
  "extends": "./tsconfig.json",
  "compilerOptions": {
    "outDir": "./out-tsc/app",
    "types": []
  },
  "files": [
    "src/main.ts"
  ],
  "include": [
    "src/**/*.d.ts"
  ]
}

---
# frontend/src/index.html
<!doctype html>
<html lang="da">
<head>
  <meta charset="utf-8">
  <title>üèõÔ∏è Politisk Godkendelsessystem</title>
  <base href="/">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <meta name="description" content="Sikkert godkendelsessystem til politiske kontorer og statslige institutioner">
  <meta name="keywords" content="godkendelse, workflow, politik, sikkerhed, on-premise">
  <link rel="icon" type="image/x-icon" href="favicon.ico">
  
  <!-- Preload critical resources -->
  <link rel="preconnect" href="http://localhost:8000">
  
  <style>
    /* Loading spinner while app boots */
    .loading-container {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: #f5f5f5;
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      z-index: 9999;
    }
    
    .loading-spinner {
      border: 4px solid #f3f3f3;
      border-top: 4px solid #007bff;
      border-radius: 50%;
      width: 50px;
      height: 50px;
      animation: spin 1s linear infinite;
      margin-bottom: 20px;
    }
    
    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }
    
    .loading-text {
      color: #333;
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
      font-size: 18px;
    }
  </style>
</head>
<body>
  <app-root>
    <!-- Loading state while Angular boots -->
    <div class="loading-container">
      <div class="loading-spinner"></div>
      <div class="loading-text">Indl√¶ser Godkendelsessystem...</div>
    </div>
  </app-root>
</body>
</html>

---
# frontend/src/main.ts
import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';
import { AppModule } from './app/app.module';

platformBrowserDynamic().bootstrapModule(AppModule)
  .catch(err => console.error('Fejl ved opstart af applikation:', err));

---
# frontend/src/styles.css
/* Global styles for Politisk Godkendelsessystem */

/* CSS Reset and base styles */
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

html, body {
  height: 100%;
}

body {
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
  background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
  color: #333;
  line-height: 1.6;
  overflow-x: hidden;
}

/* Typography */
h1, h2, h3, h4, h5, h6 {
  font-weight: 600;
  line-height: 1.3;
  margin-bottom: 0.5em;
}

h1 { font-size: 2.5rem; color: #2c3e50; }
h2 { font-size: 2rem; color: #34495e; }
h3 { font-size: 1.5rem; color: #34495e; }

p {
  margin-bottom: 1em;
  color: #555;
}

/* Layout components */
.container {
  max-width: 1400px;
  margin: 0 auto;
  padding: 20px;
}

.row {
  display: flex;
  flex-wrap: wrap;
  margin: -10px;
}

.col {
  flex: 1;
  padding: 10px;
}

.col-6 {
  flex: 0 0 50%;
  padding: 10px;
}

.col-4 {
  flex: 0 0 33.333%;
  padding: 10px;
}

.col-3 {
  flex: 0 0 25%;
  padding: 10px;
}

/* Card component */
.card {
  background: white;
  border-radius: 12px;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05), 0 1px 3px rgba(0, 0, 0, 0.1);
  padding: 24px;
  margin-bottom: 20px;
  transition: transform 0.2s ease, box-shadow 0.2s ease;
  border: 1px solid rgba(0, 0, 0, 0.05);
}

.card:hover {
  transform: translateY(-2px);
  box-shadow: 0 8px 15px rgba(0, 0, 0, 0.1), 0 3px 6px rgba(0, 0, 0, 0.1);
}

.card-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 16px;
  padding-bottom: 16px;
  border-bottom: 1px solid #e9ecef;
}

.card-title {
  margin: 0;
  color: #2c3e50;
  font-size: 1.25rem;
  font-weight: 600;
}

.card-body {
  color: #555;
}

.card-footer {
  margin-top: 20px;
  padding-top: 16px;
  border-top: 1px solid #e9ecef;
  display: flex;
  gap: 12px;
  align-items: center;
}

/* Button styles */
.btn {
  display: inline-flex;
  align-items: center;
  padding: 10px 20px;
  border: none;
  border-radius: 8px;
  cursor: pointer;
  font-weight: 600;
  font-size: 14px;
  text-decoration: none;
  transition: all 0.2s ease;
  gap: 8px;
  min-height: 40px;
  justify-content: center;
}

.btn:disabled {
  opacity: 0.6;
  cursor: not-allowed;
  transform: none !important;
}

.btn:hover:not(:disabled) {
  transform: translateY(-1px);
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
}

.btn-primary {
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  color: white;
}

.btn-success {
  background: linear-gradient(135deg, #11998e 0%, #38ef7d 100%);
  color: white;
}

.btn-danger {
  background: linear-gradient(135deg, #ff6b6b 0%, #ee5a52 100%);
  color: white;
}

.btn-warning {
  background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
  color: white;
}

.btn-secondary {
  background: #6c757d;
  color: white;
}

.btn-outline {
  background: transparent;
  border: 2px solid currentColor;
  color: #667eea;
}

.btn-sm {
  padding: 6px 12px;
  font-size: 12px;
  min-height: 32px;
}

.btn-lg {
  padding: 14px 28px;
  font-size: 16px;
  min-height: 48px;
}

/* Form controls */
.form-group {
  margin-bottom: 20px;
}

.form-label {
  display: block;
  margin-bottom: 6px;
  font-weight: 600;
  color: #2c3e50;
  font-size: 14px;
}

.form-control {
  width: 100%;
  padding: 12px 16px;
  border: 2px solid #e9ecef;
  border-radius: 8px;
  font-size: 16px;
  transition: border-color 0.2s ease, box-shadow 0.2s ease;
  background: white;
}

.form-control:focus {
  border-color: #667eea;
  outline: none;
  box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
}

.form-control:invalid {
  border-color: #dc3545;
}

select.form-control {
  cursor: pointer;
}

textarea.form-control {
  resize: vertical;
  min-height: 80px;
}

/* Alert components */
.alert {
  padding: 16px 20px;
  border-radius: 8px;
  margin-bottom: 20px;
  border: 1px solid transparent;
  display: flex;
  align-items: center;
  gap: 12px;
}

.alert-success {
  background: linear-gradient(135deg, #d4f8d4 0%, #a8e6a8 100%);
  color: #155724;
  border-color: #c3e6cb;
}

.alert-danger {
  background: linear-gradient(135deg, #f8d7da 0%, #f5c6cb 100%);
  color: #721c24;
  border-color: #f5c6cb;
}

.alert-warning {
  background: linear-gradient(135deg, #fff3cd 0%, #ffeaa7 100%);
  color: #856404;
  border-color: #ffeaa7;
}

.alert-info {
  background: linear-gradient(135deg, #d1ecf1 0%, #bee5eb 100%);
  color: #0c5460;
  border-color: #bee5eb;
}

/* Badge component */
.badge {
  display: inline-flex;
  align-items: center;
  padding: 4px 12px;
  border-radius: 20px;
  font-size: 12px;
  font-weight: 700;
  text-transform: uppercase;
  letter-spacing: 0.5px;
  gap: 4px;
}

.badge-pending {
  background: linear-gradient(135deg, #fff3cd 0%, #ffeaa7 100%);
  color: #856404;
}

.badge-approved {
  background: linear-gradient(135deg, #d4edda 0%, #c3e6cb 100%);
  color: #155724;
}

.badge-rejected {
  background: linear-gradient(135deg, #f8d7da 0%, #f5c6cb 100%);
  color: #721c24;
}

.badge-escalated {
  background: linear-gradient(135deg, #e2e3e5 0%, #d6d8db 100%);
  color: #383d41;
}

/* Priority indicators */
.priority-urgent {
  border-left: 6px solid #dc3545;
  background: linear-gradient(90deg, rgba(220, 53, 69, 0.05) 0%, transparent 20%);
}

.priority-high {
  border-left: 6px solid #fd7e14;
  background: linear-gradient(90deg, rgba(253, 126, 20, 0.05) 0%, transparent 20%);
}

.priority-medium {
  border-left: 6px solid #ffc107;
  background: linear-gradient(90deg, rgba(255, 193, 7, 0.05) 0%, transparent 20%);
}

.priority-low {
  border-left: 6px solid #6c757d;
  background: linear-gradient(90deg, rgba(108, 117, 125, 0.05) 0%, transparent 20%);
}

/* Grid system for approval cards */
.approval-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(400px, 1fr));
  gap: 20px;
  margin-top: 20px;
}

.approval-card {
  position: relative;
  overflow: hidden;
}

/* Loading states */
.loading {
  display: flex;
  justify-content: center;
  align-items: center;
  padding: 40px;
}

.spinner {
  border: 3px solid #f3f3f3;
  border-top: 3px solid #667eea;
  border-radius: 50%;
  width: 40px;
  height: 40px;
  animation: spin 1s linear infinite;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

/* Utility classes */
.text-center { text-align: center; }
.text-left { text-align: left; }
.text-right { text-align: right; }

.mt-0 { margin-top: 0; }
.mt-1 { margin-top: 8px; }
.mt-2 { margin-top: 16px; }
.mt-3 { margin-top: 24px; }
.mt-4 { margin-top: 32px; }

.mb-0 { margin-bottom: 0; }
.mb-1 { margin-bottom: 8px; }
.mb-2 { margin-bottom: 16px; }
.mb-3 { margin-bottom: 24px; }
.mb-4 { margin-bottom: 32px; }

.p-0 { padding: 0; }
.p-1 { padding: 8px; }
.p-2 { padding: 16px; }
.p-3 { padding: 24px; }

.d-flex { display: flex; }
.d-grid { display: grid; }
.d-none { display: none; }
.d-block { display: block; }

.justify-center { justify-content: center; }
.justify-between { justify-content: space-between; }
.align-center { align-items: center; }

.gap-1 { gap: 8px; }
.gap-2 { gap: 16px; }
.gap-3 { gap: 24px; }

/* Connection status indicator */
.connection-status {
  position: fixed;
  top: 20px;
  right: 20px;
  z-index: 1000;
  padding: 8px 16px;
  border-radius: 20px;
  font-size: 12px;
  font-weight: 600;
  display: flex;
  align-items: center;
  gap: 8px;
}

.connection-status.connected {
  background: #d4edda;
  color: #155724;
  border: 1px solid #c3e6cb;
}

.connection-status.disconnected {
  background: #f8d7da;
  color: #721c24;
  border: 1px solid #f5c6cb;
}

.status-indicator {
  width: 8px;
  height: 8px;
  border-radius: 50%;
  background: currentColor;
  animation: pulse 2s infinite;
}

@keyframes pulse {
  0% { opacity: 1; }
  50% { opacity: 0.5; }
  100% { opacity: 1; }
}

/* Filters and search */
.filters-container {
  background: white;
  padding: 20px;
  border-radius: 12px;
  margin-bottom: 20px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
}

.filters-row {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
  gap: 16px;
  align-items: end;
}

/* Responsive design */
@media (max-width: 768px) {
  .container {
    padding: 12px;
  }
  
  .row {
    margin: -5px;
  }
  
  .col, .col-6, .col-4, .col-3 {
    flex: 0 0 100%;
    padding: 5px;
  }
  
  .approval-grid {
    grid-template-columns: 1fr;
    gap: 12px;
  }
  
  .card {
    padding: 16px;
  }
  
  h1 { font-size: 2rem; }
  h2 { font-size: 1.5rem; }
  
  .btn {
    padding: 12px 16px;
    font-size: 16px; /* Better for mobile touch */
  }
  
  .filters-row {
    grid-template-columns: 1fr;
  }
}

@media (max-width: 480px) {
  .container {
    padding: 8px;
  }
  
  .card {
    padding: 12px;
  }
  
  .card-footer {
    flex-direction: column;
    gap: 8px;
  }
  
  .btn {
    width: 100%;
    justify-content: center;
  }
}

/* Print styles */
@media print {
  .btn, .filters-container, .connection-status {
    display: none;
  }
  
  .card {
    break-inside: avoid;
    box-shadow: none;
    border: 1px solid #ddd;
  }
  
  body {
    background: white;
  }
}

/* Dark mode support (if needed) */
@media (prefers-color-scheme: dark) {
  /* Add dark mode styles here if needed */
}

/* High contrast mode support */
@media (prefers-contrast: high) {
  .card {
    border: 2px solid #000;
  }
  
  .btn {
    border: 2px solid currentColor;
  }
}

/* Reduced motion support */
@media (prefers-reduced-motion: reduce) {
  *, *::before, *::after {
    animation-duration: 0.01ms !important;
    animation-iteration-count: 1 !important;
    transition-duration: 0.01ms !important;
  }
}

---
# frontend/src/app/app.module.ts
import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { HttpClientModule } from '@angular/common/http';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';

import { AppComponent } from './app.component';
import { ApprovalListComponent } from './components/approval-list.component';
import { CreateRequestComponent } from './components/create-request.component';

@NgModule({
  declarations: [
    AppComponent,
    ApprovalListComponent,
    CreateRequestComponent
  ],
  imports: [
    BrowserModule,
    HttpClientModule,
    FormsModule,
    ReactiveFormsModule
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule { }

---
# frontend/src/app/app.component.ts
import { Component, OnInit, OnDestroy, ViewChild } from '@angular/core';
import { ApprovalService } from './services/approval.service';
import { ApprovalListComponent } from './components/approval-list.component';

@Component({
  selector: 'app-root',
  template: `
    <div class="app-container">
      <!-- Header -->
      <header class="app-header">
        <div class="container">
          <div class="header-content">
            <div class="logo-section">
              <h1>üèõÔ∏è Politisk Godkendelsessystem</h1>
              <p class="tagline">Sikker workflow til statslige institutioner</p>
            </div>
            
            <div class="header-stats" *ngIf="systemStats">
              <div class="stat-item">
                <span class="stat-value">{{ systemStats.total_connections || 0 }}</span>
                <span class="stat-label">Aktive forbindelser</span>
              </div>
              <div class="stat-item">
                <span class="stat-value">{{ pendingCount }}</span>
                <span class="stat-label">Afventende</span>
              </div>
            </div>
          </div>
        </div>
      </header>

      <!-- Connection Status -->
      <div class="connection-status" [class.connected]="isConnected" [class.disconnected]="!isConnected">
        <span class="status-indicator"></span>
        {{ connectionStatus }}
      </div>

      <!-- Main Content -->
      <main class="main-content">
        <div class="container">
          
          <!-- System Status Card -->
          <div class="card" *ngIf="systemInfo">
            <div class="card-header">
              <h3 class="card-title">üìä System Status</h3>
              <span class="badge" [class.badge-approved]="systemInfo.database === 'healthy'" 
                    [class.badge-danger]="systemInfo.database !== 'healthy'">
                {{ systemInfo.database === 'healthy' ? '‚úÖ Operationel' : '‚ùå Fejl' }}
              </span>
            </div>
            <div class="card-body">
              <div class="row">
                <div class="col-3">
                  <strong>Backend API:</strong><br>
                  <small>{{ apiUrl }}</small>
                </div>
                <div class="col-3">
                  <strong>Database:</strong><br>
                  <small>PostgreSQL {{ systemInfo.database }}</small>
                </div>
                <div class="col-3">
                  <strong>Real-time:</strong><br>
                  <small>WebSocket {{ isConnected ? 'aktiv' : 'inaktiv' }}</small>
                </div>
                <div class="col-3">
                  <strong>Sikkerhed:</strong><br>
                  <small>100% On-premise</small>
                </div>
              </div>
            </div>
          </div>

          <!-- Action Cards Row -->
          <div class="row">
            <div class="col-6">
              <div class="card">
                <div class="card-header">
                  <h2 class="card-title">üìù Opret Ny Anmodning</h2>
                </div>
                <div class="card-body">
                  <app-create-request (requestCreated)="onRequestCreated($event)"></app-create-request>
                </div>
              </div>
            </div>

            <div class="col-6">
              <div class="card">
                <div class="card-header">
                  <h2 class="card-title">üìã Aktive Anmodninger</h2>
                  <button class="btn btn-outline btn-sm" (click)="refreshData()">
                    üîÑ Opdater
                  </button>
                </div>
                <div class="card-body">
                  <app-approval-list #approvalList (statusChanged)="onStatusChanged($event)"></app-approval-list>
                </div>
              </div>
            </div>
          </div>

          <!-- Recent Activity -->
          <div class="card" *ngIf="recentActivity.length > 0">
            <div class="card-header">
              <h3 class="card-title">‚ö° Seneste Aktivitet</h3>
              <small>Real-time opdateringer</small>
            </div>
            <div class="card-body">
              <div class="activity-feed">
                <div *ngFor="let activity of recentActivity | slice:0:5" class="activity-item">
                  <span class="activity-time">{{ activity.timestamp | date:'short' }}</span>
                  <span class="activity-message">{{ activity.message }}</span>
                  <span class="activity-type badge" [class]="'badge-' + activity.type">
                    {{ activity.type }}
                  </span>
                </div>
              </div>
            </div>
          </div>

          <!-- Quick Actions -->
          <div class="card">
            <div class="card-header">
              <h3 class="card-title">üöÄ Hurtig Test</h3>
            </div>
            <div class="card-body">
              <p>Kom hurtigt i gang med systemet:</p>
              <div class="d-flex gap-2">
                <button class="btn btn-primary" (click)="createTestUsers()">
                  üë• Opret Test Brugere
                </button>
                <button class="btn btn-secondary" (click)="createSampleRequest()">
                  üìÑ Opret Eksempel Anmodning  
                </button>
                <button class="btn btn-warning" (click)="viewApiDocs()">
                  üìö API Dokumentation
                </button>
              </div>
              <small class="reference-number">{{ request.reference_number }}</small>
            </div>
            <div class="header-actions">
              <span class="badge" [class]="'badge-' + request.status">
                {{ getStatusText(request.status) }}
              </span>
              <span class="badge priority-badge" [class]="'priority-' + request.priority">
                {{ getPriorityText(request.priority) }}
              </span>
            </div>
          </div>

          <!-- Card Body -->
          <div class="card-body">
            <p class="description">{{ request.description }}</p>

            <!-- Request Details Grid -->
            <div class="details-grid">
              <div class="detail-item">
                <strong>üë§ Anmoder:</strong>
                <span>{{ request.requester.name }}</span>
              </div>
              <div class="detail-item">
                <strong>‚úÖ Godkender:</strong>
                <span>{{ request.approver.name }}</span>
              </div>
              <div class="detail-item">
                <strong>üìÅ Kategori:</strong>
                <span>{{ getCategoryText(request.category) }}</span>
              </div>
              <div class="detail-item" *ngIf="request.amount">
                <strong>üí∞ Bel√∏b:</strong>
                <span>{{ formatAmount(request.amount) }}</span>
              </div>
              <div class="detail-item">
                <strong>üìÖ Oprettet:</strong>
                <span>{{ request.created_at | date:'dd/MM/yyyy HH:mm' }}</span>
              </div>
              <div class="detail-item" *ngIf="request.due_date">
                <strong>‚è∞ Frist:</strong>
                <span [class.overdue-text]="isOverdue(request.due_date)">
                  {{ request.due_date | date:'dd/MM/yyyy' }}
                  <span *ngIf="isOverdue(request.due_date)" class="overdue-badge">
                    ({{ calculateDaysOverdue(request.due_date) }} dage forsinket)
                  </span>
                </span>
              </div>
            </div>

            <!-- Comments preview -->
            <div *ngIf="request.comments && request.comments.length > 0" class="comments-preview">
              <strong>üí¨ Seneste kommentar:</strong>
              <div class="comment-item">
                <small>{{ request.comments[request.comments.length - 1].user.name }} - 
                  {{ request.comments[request.comments.length - 1].created_at | date:'dd/MM HH:mm' }}</small>
                <p>{{ request.comments[request.comments.length - 1].content }}</p>
              </div>
            </div>
          </div>

          <!-- Card Footer with Actions -->
          <div class="card-footer" *ngIf="request.status === 'pending'">
            <div class="action-buttons">
              <button 
                (click)="updateRequest(request.id, 'approved')" 
                class="btn btn-success btn-sm"
                [disabled]="updating === request.id">
                <span *ngIf="updating === request.id">‚è≥</span>
                <span *ngIf="updating !== request.id">‚úÖ</span>
                Godkend
              </button>
              
              <button 
                (click)="updateRequest(request.id, 'rejected')" 
                class="btn btn-danger btn-sm"
                [disabled]="updating === request.id">
                <span *ngIf="updating === request.id">‚è≥</span>
                <span *ngIf="updating !== request.id">‚ùå</span>
                Afvis
              </button>

              <button 
                (click)="showCommentDialog(request)" 
                class="btn btn-secondary btn-sm">
                üí¨ Kommentar
              </button>
            </div>
          </div>

          <!-- Escalated status info -->
          <div class="card-footer" *ngIf="request.status === 'escalated'">
            <div class="alert alert-warning">
              ‚ö†Ô∏è Denne anmodning er blevet eskaleret og afventer handling fra h√∏jere niveau.
            </div>
          </div>
        </div>
      </div>

      <!-- Pagination -->
      <div class="pagination-container" *ngIf="!loading && totalRequests > requests.length">
        <div class="pagination-info">
          Viser {{ requests.length }} af {{ totalRequests }} anmodninger
        </div>
        <button 
          class="btn btn-primary" 
          (click)="loadMore()"
          [disabled]="loadingMore">
          <span *ngIf="loadingMore">‚è≥ Indl√¶ser...</span>
          <span *ngIf="!loadingMore">üìÑ Indl√¶s flere</span>
        </button>
      </div>

    </div>

    <!-- Comment Dialog -->
    <div class="modal-overlay" *ngIf="showingCommentDialog" (click)="closeCommentDialog()">
      <div class="modal-content" (click)="$event.stopPropagation()">
        <div class="modal-header">
          <h3>üí¨ Tilf√∏j Kommentar</h3>
          <button class="btn btn-sm btn-secondary" (click)="closeCommentDialog()">‚úï</button>
        </div>
        <div class="modal-body">
          <div class="form-group">
            <label class="form-label">Kommentar til: {{ selectedRequest?.title }}</label>
            <textarea 
              [(ngModel)]="commentText" 
              class="form-control" 
              rows="4"
              placeholder="Skriv din kommentar her..."></textarea>
          </div>
        </div>
        <div class="modal-footer">
          <button class="btn btn-secondary" (click)="closeCommentDialog()">Annuller</button>
          <button class="btn btn-primary" (click)="addComment()" [disabled]="!commentText.trim()">
            üí¨ Tilf√∏j Kommentar
          </button>
        </div>
      </div>
    </div>
  `,
  styles: [`
    .approval-list {
      width: 100%;
    }

    .filters-container {
      margin-bottom: 20px;
    }

    .filters-row {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
      gap: 16px;
      align-items: end;
    }

    .approval-grid {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(400px, 1fr));
      gap: 20px;
    }

    .approval-card {
      transition: transform 0.2s ease, box-shadow 0.2s ease;
      position: relative;
      overflow: hidden;
    }

    .approval-card.overdue {
      border-left: 6px solid #dc3545;
      background: linear-gradient(90deg, rgba(220, 53, 69, 0.1) 0%, transparent 20%);
    }

    .header-main {
      flex: 1;
    }

    .header-actions {
      display: flex;
      flex-direction: column;
      gap: 4px;
      align-items: end;
    }

    .reference-number {
      color: #666;
      font-size: 0.8rem;
      font-family: monospace;
    }

    .priority-badge {
      font-size: 0.7rem;
      padding: 2px 8px;
    }

    .details-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
      gap: 12px;
      margin: 16px 0;
    }

    .detail-item {
      display: flex;
      flex-direction: column;
      gap: 4px;
    }

    .detail-item strong {
      font-size: 0.8rem;
      color: #666;
    }

    .description {
      color: #555;
      margin-bottom: 16px;
      line-height: 1.5;
    }

    .comments-preview {
      background: #f8f9fa;
      padding: 12px;
      border-radius: 6px;
      margin-top: 16px;
    }

    .comment-item {
      margin-top: 8px;
    }

    .comment-item small {
      color: #666;
      font-size: 0.8rem;
    }

    .comment-item p {
      margin: 4px 0 0 0;
      font-size: 0.9rem;
    }

    .action-buttons {
      display: flex;
      gap: 8px;
      flex-wrap: wrap;
    }

    .overdue-text {
      color: #dc3545;
      font-weight: 600;
    }

    .overdue-badge {
      background: #dc3545;
      color: white;
      padding: 2px 6px;
      border-radius: 10px;
      font-size: 0.7rem;
      margin-left: 4px;
    }

    .pagination-container {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-top: 30px;
      padding: 20px;
      background: white;
      border-radius: 8px;
      box-shadow: 0 2px 4px rgba(0,0,0,0.05);
    }

    .pagination-info {
      color: #666;
      font-size: 0.9rem;
    }

    /* Modal styles */
    .modal-overlay {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0, 0, 0, 0.5);
      display: flex;
      justify-content: center;
      align-items: center;
      z-index: 1000;
    }

    .modal-content {
      background: white;
      border-radius: 12px;
      width: 90%;
      max-width: 500px;
      max-height: 80vh;
      overflow-y: auto;
      box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);
    }

    .modal-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 20px;
      border-bottom: 1px solid #eee;
    }

    .modal-header h3 {
      margin: 0;
    }

    .modal-body {
      padding: 20px;
    }

    .modal-footer {
      display: flex;
      justify-content: end;
      gap: 12px;
      padding: 20px;
      border-top: 1px solid #eee;
    }

    @media (max-width: 768px) {
      .approval-grid {
        grid-template-columns: 1fr;
        gap: 12px;
      }

      .filters-row {
        grid-template-columns: 1fr;
      }

      .details-grid {
        grid-template-columns: 1fr;
      }

      .action-buttons {
        flex-direction: column;
      }

      .pagination-container {
        flex-direction: column;
        gap: 12px;
        text-align: center;
      }
    }
  `]
})
export class ApprovalListComponent implements OnInit {
  @Output() statusChanged = new EventEmitter<{id: number, status: string}>();

  requests: ApprovalRequest[] = [];
  totalRequests = 0;
  loading = false;
  loadingMore = false;
  updating: number | null = null;

  // Comment dialog
  showingCommentDialog = false;
  selectedRequest: ApprovalRequest | null = null;
  commentText = '';

  // Filters
  filters: ApprovalFilters = {
    skip: 0,
    limit: 12,
    status: '',
    priority: '',
    category: '',
    search: ''
  };

  private searchTimeout: any = null;

  constructor(private approvalService: ApprovalService) {}

  ngOnInit() {
    this.loadRequests();
  }

  loadRequests() {
    this.loading = true;
    this.filters.skip = 0; // Reset pagination

    this.approvalService.getApprovalRequests(this.filters).subscribe({
      next: (response) => {
        this.requests = response.requests;
        this.totalRequests = response.total;
        this.loading = false;
      },
      error: (error) => {
        console.error('Fejl ved indl√¶sning af anmodninger:', error);
        this.loading = false;
        alert(`Fejl ved indl√¶sning: ${error.message}`);
      }
    });
  }

  loadMore() {
    if (!this.filters.skip) this.filters.skip = 0;
    this.filters.skip += this.filters.limit || 12;
    this.loadingMore = true;

    this.approvalService.getApprovalRequests(this.filters).subscribe({
      next: (response) => {
        this.requests = [...this.requests, ...response.requests];
        this.loadingMore = false;
      },
      error: (error) => {
        console.error('Fejl ved indl√¶sning af flere anmodninger:', error);
        this.loadingMore = false;
        alert(`Fejl ved indl√¶sning: ${error.message}`);
      }
    });
  }

  onFilterChange() {
    this.loadRequests();
  }

  onSearchChange() {
    // Debounce search to avoid too many API calls
    if (this.searchTimeout) {
      clearTimeout(this.searchTimeout);
    }
    
    this.searchTimeout = setTimeout(() => {
      this.loadRequests();
    }, 500);
  }

  clearFilters() {
    this.filters = {
      skip: 0,
      limit: 12,
      status: '',
      priority: '',
      category: '',
      search: ''
    };
    this.loadRequests();
  }

  updateRequest(id: number, status: 'approved' | 'rejected') {
    this.updating = id;

    const statusText = status === 'approved' ? 'godkende' : 'afvise';
    
    if (!confirm(`Er du sikker p√• at du vil ${statusText} denne anmodning?`)) {
      this.updating = null;
      return;
    }

    this.approvalService.updateApprovalRequest(id, { status }, 1).subscribe({
      next: (updatedRequest) => {
        // Update the request in the list
        const index = this.requests.findIndex(r => r.id === id);
        if (index >= 0) {
          this.requests[index] = updatedRequest;
        }
        
        this.updating = null;
        this.statusChanged.emit({ id, status });
        
        const successText = status === 'approved' ? 'godkendt' : 'afvist';
        alert(`‚úÖ Anmodning ${successText} succesfuldt!`);
      },
      error: (error) => {
        console.error('Fejl ved opdatering af anmodning:', error);
        this.updating = null;
        alert(`‚ùå Fejl ved opdatering: ${error.message}`);
      }
    });
  }

  showCommentDialog(request: ApprovalRequest) {
    this.selectedRequest = request;
    this.commentText = '';
    this.showingCommentDialog = true;
  }

  closeCommentDialog() {
    this.showingCommentDialog = false;
    this.selectedRequest = null;
    this.commentText = '';
  }

  addComment() {
    if (!this.selectedRequest || !this.commentText.trim()) return;

    this.approvalService.addComment(
      this.selectedRequest.id, 
      this.commentText.trim(), 
      1, // Current user ID
      false // Not internal
    ).subscribe({
      next: () => {
        alert('‚úÖ Kommentar tilf√∏jet!');
        this.closeCommentDialog();
        // Reload the specific request to get updated comments
        this.loadRequests();
      },
      error: (error) => {
        console.error('Fejl ved tilf√∏jelse af kommentar:', error);
        alert(`‚ùå Fejl ved tilf√∏jelse af kommentar: ${error.message}`);
      }
    });
  }

  // Utility methods
  getStatusText(status: string): string {
    return this.approvalService.getStatusText(status);
  }

  getPriorityText(priority: string): string {
    return this.approvalService.getPriorityText(priority);
  }

  getCategoryText(category: string): string {
    return this.approvalService.getCategoryText(category);
  }

  formatAmount(amount: number | undefined): string {
    return this.approvalService.formatAmount(amount);
  }

  isOverdue(dueDate: string | undefined): boolean {
    return this.approvalService.isOverdue(dueDate);
  }

  calculateDaysOverdue(dueDate: string): number {
    return this.approvalService.calculateDaysOverdue(dueDate);
  }
}

---
# frontend/src/app/components/create-request.component.ts
import { Component, OnInit, Output, EventEmitter } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { ApprovalService } from '../services/approval.service';
import { User, CreateApprovalRequest, ApprovalRequest } from '../models/approval.model';

@Component({
  selector: 'app-create-request',
  template: `
    <div class="create-request">
      
      <!-- Success/Error Messages -->
      <div *ngIf="successMessage" class="alert alert-success">
        ‚úÖ {{ successMessage }}
      </div>

      <div *ngIf="errorMessage" class="alert alert-danger">
        ‚ùå {{ errorMessage }}
      </div>

      <!-- Main Form -->
      <form [formGroup]="requestForm" (ngSubmit)="onSubmit()">
        
        <!-- Title -->
        <div class="form-group">
          <label for="title" class="form-label">Titel *</label>
          <input 
            type="text" 
            id="title"
            class="form-control" 
            formControlName="title"
            placeholder="F.eks. Nyt kontorudstyr, IT-udstyr, rejsegodkendelse..."
            [class.is-invalid]="requestForm.get('title')?.invalid && requestForm.get('title')?.touched">
          <div *ngIf="requestForm.get('title')?.invalid && requestForm.get('title')?.touched" class="invalid-feedback">
            Titel er p√•kr√¶vet
          </div>
        </div>

        <!-- Description -->
        <div class="form-group">
          <label for="description" class="form-label">Beskrivelse *</label>
          <textarea 
            id="description"
            class="form-control" 
            formControlName="description"
            rows="4"
            placeholder="Detaljeret beskrivelse af anmodningen, begrundelse, specifikationer..."
            [class.is-invalid]="requestForm.get('description')?.invalid && requestForm.get('description')?.touched"></textarea>
          <div *ngIf="requestForm.get('description')?.invalid && requestForm.get('description')?.touched" class="invalid-feedback">
            Beskrivelse er p√•kr√¶vet
          </div>
        </div>

        <!-- Category and Priority Row -->
        <div class="row">
          <div class="col-6">
            <div class="form-group">
              <label for="category" class="form-label">Kategori *</label>
              <select 
                id="category" 
                class="form-control" 
                formControlName="category"
                [class.is-invalid]="requestForm.get('category')?.invalid && requestForm.get('category')?.touched">
                <option value="">V√¶lg kategori</option>
                <option value="IT">üñ•Ô∏è IT & Teknologi</option>
                <option value="Indk√∏b">üõí Indk√∏b & Procurement</option>
                <option value="HR">üë• Personal & HR</option>
                <option value="√òkonomi">üí∞ √òkonomi & Budget</option>
                <option value="Drift">üîß Drift & Vedligeholdelse</option>
                <option value="Rejse">‚úàÔ∏è Rejse & Transport</option>
                <option value="Uddannelse">üìö Uddannelse & Kurser</option>
                <option value="Andet">üìã Andet</option>
              </select>
              <div *ngIf="requestForm.get('category')?.invalid && requestForm.get('category')?.touched" class="invalid-feedback">
                Kategori er p√•kr√¶vet
              </div>
            </div>
          </div>

          <div class="col-6">
            <div class="form-group">
              <label for="priority" class="form-label">Prioritet *</label>
              <select 
                id="priority" 
                class="form-control" 
                formControlName="priority">
                <option value="low">üü¢ Lav - Ikke kritisk</option>
                <option value="medium">üü° Mellem - Normal hastighed</option>
                <option value="high">üü† H√∏j - Vigtigt</option>
                <option value="urgent">üî¥ Akut - Kritisk</option>
              </select>
            </div>
          </div>
        </div>

        <!-- Amount and Due Date Row -->
        <div class="row">
          <div class="col-6">
            <div class="form-group">
              <label for="amount" class="form-label">Bel√∏b (DKK)</label>
              <input 
                type="number" 
                id="amount"
                class="form-control" 
                formControlName="amount"
                placeholder="0"
                min="0"
                step="1"
                [class.is-invalid]="requestForm.get('amount')?.invalid && requestForm.get('amount')?.touched">
              <small class="form-text">Lad st√• tom hvis ikke relevant</small>
              <div *ngIf="requestForm.get('amount')?.invalid && requestForm.get('amount')?.touched" class="invalid-feedback">
                Bel√∏b skal v√¶re positivt
              </div>
            </div>
          </div>

          <div class="col-6">
            <div class="form-group">
              <label for="due_date" class="form-label">√ònsket frist</label>
              <input 
                type="date" 
                id="due_date"
                class="form-control" 
                formControlName="due_date"
                [min]="minDate">
              <small class="form-text">Hvorn√•r skal dette v√¶re f√¶rdigt?</small>
            </div>
          </div>
        </div>

        <!-- Approver Selection -->
        <div class="form-group">
          <label for="approver" class="form-label">Godkender *</label>
          <select 
            id="approver" 
            class="form-control" 
            formControlName="approver_id"
            [class.is-invalid]="requestForm.get('approver_id')?.invalid && requestForm.get('approver_id')?.touched">
            <option value="">V√¶lg godkender</option>
            <option *ngFor="let user of users" [value]="user.id">
              {{ user.name }} - {{ user.role }}
              <span *ngIf="user.department">({{ user.department }})</span>
            </option>
          </select>
          <div *ngIf="requestForm.get('approver_id')?.invalid && requestForm.get('approver_id')?.touched" class="invalid-feedback">
            Godkender er p√•kr√¶vet
          </div>
          <small class="form-text">V√¶lg den person der skal godkende denne anmodning</small>
        </div>

        <!-- External Reference (Optional) -->
        <div class="form-group">
          <label for="external_reference" class="form-label">Ekstern reference</label>
          <input 
            type="text" 
            id="external_reference"
            class="form-control" 
            formControlName="external_reference"
            placeholder="F.eks. sagsnummer, fakturanummer, kontrakt ID...">
          <small class="form-text">Valgfrit - reference til eksisterende sager eller dokumenter</small>
        </div>

        <!-- Confidentiality Level -->
        <div class="form-group">
          <label for="confidentiality_level" class="form-label">Fortrolighedsniveau</label>
          <select 
            id="confidentiality_level" 
            class="form-control" 
            formControlName="confidentiality_level">
            <option value="normal">üîì Normal - Standard adgang</option>
            <option value="confidential">üîí Fortroligt - Begr√¶nset adgang</option>
            <option value="secret">üîê Hemmeligt - H√∏jeste sikkerhed</option>
          </select>
          <small class="form-text">V√¶lg passende sikkerhedsniveau for denne anmodning</small>
        </div>

        <!-- Submit Button -->
        <div class="form-actions">
          <button 
            type="submit" 
            class="btn btn-primary btn-lg" 
            [disabled]="!requestForm.valid || submitting">
            <span *ngIf="submitting">‚è≥ Opretter...</span>
            <span *ngIf="!submitting">üì§ Opret Godkendelsesanmodning</span>
          </button>
          
          <button 
            type="button" 
            class="btn btn-secondary btn-lg" 
            (click)="resetForm()"
            [disabled]="submitting">
            üîÑ Nulstil
          </button>
        </div>

        <!-- Form Validation Summary -->
        <div *ngIf="!requestForm.valid && requestForm.touched" class="alert alert-warning mt-3">
          <strong>‚ö†Ô∏è Manglende oplysninger:</strong>
          <ul class="mb-0 mt-2">
            <li *ngIf="requestForm.get('title')?.invalid">Titel er p√•kr√¶vet</li>
            <li *ngIf="requestForm.get('description')?.invalid">Beskrivelse er p√•kr√¶vet</li>
            <li *ngIf="requestForm.get('category')?.invalid">Kategori skal v√¶lges</li>
            <li *ngIf="requestForm.get('approver_id')?.invalid">Godkender skal v√¶lges</li>
            <li *ngIf="requestForm.get('amount')?.invalid">Bel√∏b skal v√¶re positivt (eller tomt)</li>
          </ul>
        </div>
      </form>

      <!-- Quick Actions Section -->
      <div class="quick-actions-section">
        <div class="card">
          <div class="card-header">
            <h4>üöÄ Hurtig Start</h4>
          </div>
          <div class="card-body">
            <p>Mangler test data? Opret hurtig test setup:</p>
            <div class="d-flex gap-2">
              <button 
                (click)="createTestUsers()" 
                class="btn btn-outline btn-sm"
                [disabled]="creatingTestData">
                <span *ngIf="creatingTestData">‚è≥</span>
                <span *ngIf="!creatingTestData">üë•</span>
                Opret Test Brugere
              </button>
              
              <button 
                (click)="fillSampleData()" 
                class="btn btn-outline btn-sm">
                üìù Udfyld Eksempel Data
              </button>
              
              <button 
                (click)="viewFormHelp()" 
                class="btn btn-outline btn-sm">
                ‚ùì Hj√¶lp
              </button>
            </div>
            <small class="text-muted d-block mt-2">
              Test brugere: Manager Jensen (godkender) og Medarbejder Hansen (anmoder)
            </small>
          </div>
        </div>
      </div>

    </div>
  `,
  styles: [`
    .create-request {
      width: 100%;
    }

    .form-actions {
      display: flex;
      gap: 12px;
      margin-top: 30px;
      padding-top: 20px;
      border-top: 1px solid #eee;
    }

    .invalid-feedback {
      color: #dc3545;
      font-size: 0.875rem;
      margin-top: 4px;
    }

    .is-invalid {
      border-color: #dc3545;
    }

    .form-text {
      color: #6c757d;
      font-size: 0.8rem;
      margin-top: 4px;
    }

    .quick-actions-section {
      margin-top: 30px;
    }

    .quick-actions-section .card {
      background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
      border: 1px solid #dee2e6;
    }

    .quick-actions-section .card-header h4 {
      margin: 0;
      color: #495057;
    }

    @media (max-width: 768px) {
      .form-actions {
        flex-direction: column;
      }
      
      .btn-lg {
        width: 100%;
      }
    }
  `]
})
export class CreateRequestComponent implements OnInit {
  @Output() requestCreated = new EventEmitter<ApprovalRequest>();
  
  requestForm: FormGroup;
  users: User[] = [];
  submitting = false;
  creatingTestData = false;
  successMessage = '';
  errorMessage = '';
  minDate = new Date().toISOString().split('T')[0]; // Today's date

  constructor(
    private fb: FormBuilder,
    private approvalService: ApprovalService
  ) {
    this.requestForm = this.fb.group({
      title: ['', [Validators.required, Validators.minLength(3)]],
      description: ['', [Validators.required, Validators.minLength(10)]],
      category: ['', Validators.required],
      priority: ['medium', Validators.required],
      amount: [null, [Validators.min(0)]],
      approver_id: ['', Validators.required],
      due_date: [''],
      external_reference: [''],
      confidentiality_level: ['normal']
    });
  }

  ngOnInit() {
    this.loadUsers();
  }

  loadUsers() {
    this.approvalService.getUsers().subscribe({
      next: (users) => {
        this.users = users.filter(user => user.is_active);
        
        // If no users found, suggest creating test users
        if (this.users.length === 0) {
          this.errorMessage = 'Ingen brugere fundet. Opret test brugere for at komme i gang.';
        }
      },
      error: (error) => {
        console.error('Fejl ved indl√¶sning af brugere:', error);
        this.errorMessage = `Fejl ved indl√¶sning af brugere: ${error.message}`;
      }
    });
  }

  onSubmit() {
    if (this.requestForm.invalid) {
      this.requestForm.markAllAsTouched();
      this.errorMessage = 'Udfyld venligst alle p√•kr√¶vede felter korrekt.';
      return;
    }

    this.submitting = true;
    this.errorMessage = '';
    this.successMessage = '';

    const formData = this.requestForm.value;
    
    // Clean up form data
    const requestData: CreateApprovalRequest = {
      title: formData.title.trim(),
      description: formData.description.trim(),
      category: formData.category,
      priority: formData.priority,
      amount: formData.amount || undefined,
      approver_id: parseInt(formData.approver_id),
      due_date: formData.due_date || undefined,
      external_reference: formData.external_reference?.trim() || undefined,
      confidentiality_level: formData.confidentiality_level || 'normal'
    };

    this.approvalService.createApprovalRequest(requestData, 2).subscribe({
      next: (response) => {
        this.successMessage = `Anmodning "${response.title}" er oprettet succesfuldt! Reference: ${response.reference_number}`;
        this.requestForm.reset();
        this.requestForm.patchValue({ 
          priority: 'medium',
          confidentiality_level: 'normal' 
        });
        this.submitting = false;
        this.requestCreated.emit(response);
        
        // Clear success message after 5 seconds
        setTimeout(() => this.successMessage = '', 5000);
      },
      error: (error) => {
        this.errorMessage = `Fejl ved oprettelse af anmodning: ${error.message}`;
        this.submitting = false;
        console.error('Fejl:', error);
      }
    });
  }

  resetForm() {
    this.requestForm.reset();
    this.requestForm.patchValue({ 
      priority: 'medium',
      confidentiality_level: 'normal' 
    });
    this.successMessage = '';
    this.errorMessage = '';
  }

  fillSampleData() {
    this.requestForm.patchValue({
      title: 'Nyt laptop til udvikling',
      description: 'Har brug for en ny laptop til softwareudvikling. Nuv√¶rende laptop er for langsom og har ikke tilstr√¶kkelig RAM til de opgaver jeg arbejder med. √ònsker en laptop med mindst 16GB RAM og SSD disk.',
      category: 'IT',
      priority: 'medium',
      amount: 15000,
      external_reference: 'IT-2024-001',
      due_date: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString().split('T')[0] // 7 days from now
    });

    // Select first available manager as approver
    const manager = this.users.find(u => u.role.toLowerCase().includes('manager'));
    if (manager) {
      this.requestForm.patchValue({ approver_id: manager.id });
    }
  }

  createTestUsers() {
    this.creatingTestData = true;
    
    this.approvalService.createTestUsers().subscribe({
      next: () => {
        this.successMessage = 'Test brugere oprettet succesfuldt!';
        this.loadUsers(); // Reload users
        this.creatingTestData = false;
        
        setTimeout(() => this.successMessage = '', 3000);
      },
      error: (error) => {
        // Users might already exist
        if (error.message.includes('allerede registreret')) {
          this.successMessage = 'Test brugere er allerede oprettet.';
          this.loadUsers();
        } else {
          this.errorMessage = `Fejl ved oprettelse af test brugere: ${error.message}`;
        }
        this.creatingTestData = false;
      }
    });
  }

  viewFormHelp() {
    const helpText = `
üî§ TITEL: Kort, beskrivende navn for anmodningen

üìù BESKRIVELSE: Detaljeret forklaring af hvad du har brug for og hvorfor

üìÅ KATEGORI: V√¶lg den kategori der bedst beskriver din anmodning

‚ö° PRIORITET:
‚Ä¢ Lav: Ikke kritisk, kan vente
‚Ä¢ Mellem: Normal hastighed
‚Ä¢ H√∏j: Vigtigt, skal behandles snart  
‚Ä¢ Akut: Kritisk, skal behandles med det samme

üí∞ BEL√òB: Hvis anmodningen involverer et k√∏b eller udgift

üìÖ FRIST: Hvorn√•r skal dette v√¶re f√¶rdigt?

üë§ GODKENDER: V√¶lg den person der skal godkende din anmodning

üîó EKSTERN REFERENCE: Hvis dette relaterer til en eksisterende sag

üîí FORTROLIGHEDSNIVEAU: Hvor f√∏lsom er denne information?
    `;

    alert(helpText);
  }
}

# Done! All 4 artifacts are now complete with:
# 1. Setup instructions and folder structure
# 2. Docker and config files  
# 3. Complete backend with FastAPI, PostgreSQL, WebSockets
# 4. Complete frontend with Angular, real-time UI, forms

# The system includes:
# ‚úÖ Real-time WebSocket notifications
# ‚úÖ Complete CRUD operations  
# ‚úÖ Advanced filtering and search
# ‚úÖ Comment system
# ‚úÖ Priority and status management
# ‚úÖ Danish political interface
# ‚úÖ On-premise security
# ‚úÖ Audit logging
# ‚úÖ Test data creation
# ‚úÖ Responsive design
# ‚úÖ Error handling
# ‚úÖ Form validationtext-muted mt-2 d-block">
                Disse funktioner hj√¶lper dig med at teste systemet hurtigt
              </small>
            </div>
          </div>

        </div>
      </main>

      <!-- Footer -->
      <footer class="app-footer">
        <div class="container">
          <div class="footer-content">
            <div class="footer-section">
              <strong>Politisk Godkendelsessystem v1.0</strong>
              <small>Bygget til dansk politik - Sikkerhed f√∏rst üá©üá∞</small>
            </div>
            <div class="footer-section">
              <small>
                <strong>Support:</strong> systemadministrator@institution.dk<br>
                <strong>Status:</strong> {{ isConnected ? 'üü¢ Online' : 'üî¥ Offline' }}
              </small>
            </div>
          </div>
        </div>
      </footer>
    </div>
  `,
  styles: [`
    .app-container {
      min-height: 100vh;
      display: flex;
      flex-direction: column;
    }

    .app-header {
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: white;
      padding: 20px 0;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

    .header-content {
      display: flex;
      justify-content: space-between;
      align-items: center;
    }

    .logo-section h1 {
      color: white;
      margin: 0;
      font-size: 2rem;
    }

    .tagline {
      margin: 0;
      opacity: 0.9;
      font-size: 1rem;
    }

    .header-stats {
      display: flex;
      gap: 20px;
    }

    .stat-item {
      text-align: center;
    }

    .stat-value {
      display: block;
      font-size: 1.5rem;
      font-weight: bold;
    }

    .stat-label {
      font-size: 0.8rem;
      opacity: 0.8;
    }

    .main-content {
      flex: 1;
      padding: 30px 0;
    }

    .activity-feed {
      max-height: 200px;
      overflow-y: auto;
    }

    .activity-item {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 8px 0;
      border-bottom: 1px solid #eee;
    }

    .activity-time {
      font-size: 0.8rem;
      color: #666;
      min-width: 120px;
    }

    .activity-message {
      flex: 1;
      margin: 0 12px;
    }

    .app-footer {
      background: #2c3e50;
      color: white;
      padding: 20px 0;
      margin-top: auto;
    }

    .footer-content {
      display: flex;
      justify-content: space-between;
      align-items: center;
    }

    .footer-section small {
      display: block;
      opacity: 0.8;
    }

    @media (max-width: 768px) {
      .header-content {
        flex-direction: column;
        gap: 16px;
        text-align: center;
      }

      .footer-content {
        flex-direction: column;
        gap: 12px;
        text-align: center;
      }
    }
  `]
})
export class AppComponent implements OnInit, OnDestroy {
  @ViewChild('approvalList') approvalList!: ApprovalListComponent;
  
  connectionStatus = 'Opretter forbindelse...';
  isConnected = false;
  apiUrl = 'http://localhost:8000';
  systemInfo: any = null;
  systemStats: any = null;
  recentActivity: any[] = [];
  pendingCount = 0;
  
  private websocket: WebSocket | null = null;
  private reconnectInterval: any = null;

  constructor(private approvalService: ApprovalService) {}

  ngOnInit() {
    this.initializeApp();
    this.setupWebSocket();
    this.loadSystemInfo();
    this.startPeriodicUpdates();
  }

  ngOnDestroy() {
    if (this.websocket) {
      this.websocket.close();
    }
    if (this.reconnectInterval) {
      clearInterval(this.reconnectInterval);
    }
  }

  private initializeApp() {
    console.log('üèõÔ∏è Politisk Godkendelsessystem starter op...');
    this.addActivity('System startet', 'info');
  }

  private setupWebSocket() {
    const wsUrl = 'ws://localhost:8000/ws/1?role=admin';
    
    try {
      this.websocket = new WebSocket(wsUrl);
      
      this.websocket.onopen = () => {
        this.connectionStatus = 'Real-time forbindelse etableret';
        this.isConnected = true;
        this.addActivity('WebSocket forbindelse etableret', 'approved');
        console.log('‚úÖ WebSocket forbundet');
      };
      
      this.websocket.onclose = () => {
        this.connectionStatus = 'Real-time forbindelse afbrudt';
        this.isConnected = false;
        this.addActivity('WebSocket forbindelse afbrudt', 'rejected');
        console.log('‚ùå WebSocket afbrudt');
        
        // Auto-reconnect after 5 seconds
        setTimeout(() => this.setupWebSocket(), 5000);
      };
      
      this.websocket.onerror = () => {
        this.connectionStatus = 'Fejl i real-time forbindelse';
        this.isConnected = false;
        this.addActivity('WebSocket fejl', 'rejected');
      };
      
      this.websocket.onmessage = (event) => {
        try {
          const data = JSON.parse(event.data);
          this.handleWebSocketMessage(data);
        } catch (e) {
          console.error('Fejl ved parsing af WebSocket besked:', e);
        }
      };
      
    } catch (error) {
      console.error('Fejl ved oprettelse af WebSocket:', error);
      this.connectionStatus = 'Kan ikke oprette forbindelse';
      this.isConnected = false;
    }
  }

  private handleWebSocketMessage(data: any) {
    console.log('üì® WebSocket besked:', data);
    
    switch (data.type) {
      case 'new_request':
        this.addActivity(`Ny anmodning: ${data.title}`, 'pending');
        this.refreshData();
        break;
        
      case 'status_update':
        this.addActivity(`Status opdateret: ${data.message}`, data.status);
        this.refreshData();
        break;
        
      case 'approval_decision':
        this.addActivity(`Beslutning: ${data.message}`, data.status);
        this.refreshData();
        break;
        
      case 'ping':
        // Respond to ping with pong
        if (this.websocket && this.websocket.readyState === WebSocket.OPEN) {
          this.websocket.send('pong');
        }
        break;
        
      default:
        console.log('Ukendt besked type:', data.type);
    }
  }

  private loadSystemInfo() {
    this.approvalService.getSystemHealth().subscribe({
      next: (info) => {
        this.systemInfo = info;
        this.addActivity('System sundhedstjek gennemf√∏rt', 'approved');
      },
      error: (error) => {
        console.error('Fejl ved indl√¶sning af system info:', error);
        this.addActivity('System sundhedstjek fejlede', 'rejected');
      }
    });

    this.approvalService.getWebSocketStats().subscribe({
      next: (stats) => {
        this.systemStats = stats;
      },
      error: (error) => {
        console.error('Fejl ved indl√¶sning af WebSocket stats:', error);
      }
    });
  }

  private startPeriodicUpdates() {
    // Update system stats every 30 seconds
    setInterval(() => {
      this.loadSystemInfo();
      this.updatePendingCount();
    }, 30000);
  }

  private updatePendingCount() {
    this.approvalService.getApprovalRequests({ status: 'pending', limit: 1 }).subscribe({
      next: (response) => {
        this.pendingCount = response.total;
      },
      error: (error) => {
        console.error('Fejl ved opdatering af pending count:', error);
      }
    });
  }

  private addActivity(message: string, type: string) {
    this.recentActivity.unshift({
      message,
      type,
      timestamp: new Date()
    });
    
    // Keep only last 20 activities
    if (this.recentActivity.length > 20) {
      this.recentActivity = this.recentActivity.slice(0, 20);
    }
  }

  onRequestCreated(request: any) {
    this.addActivity(`Anmodning oprettet: ${request.title}`, 'pending');
    this.refreshData();
  }

  onStatusChanged(event: any) {
    this.addActivity(`Status √¶ndret til: ${event.status}`, event.status);
    this.refreshData();
  }

  refreshData() {
    if (this.approvalList) {
      this.approvalList.loadRequests();
    }
    this.updatePendingCount();
  }

  createTestUsers() {
    this.approvalService.createTestUsers().subscribe({
      next: () => {
        this.addActivity('Test brugere oprettet', 'approved');
        alert('‚úÖ Test brugere oprettet succesfuldt!');
      },
      error: (error) => {
        console.error('Fejl ved oprettelse af test brugere:', error);
        this.addActivity('Fejl ved oprettelse af test brugere', 'rejected');
      }
    });
  }

  createSampleRequest() {
    const sampleRequest = {
      title: 'Test Anmodning - Kontorudstyr',
      description: 'Dette er en test anmodning til demonstration af systemet',
      category: 'IT',
      priority: 'medium' as any,
      amount: 5000,
      approver_id: 1
    };

    this.approvalService.createApprovalRequest(sampleRequest, 2).subscribe({
      next: (request) => {
        this.addActivity(`Eksempel anmodning oprettet: ${request.title}`, 'pending');
        this.refreshData();
        alert('‚úÖ Eksempel anmodning oprettet!');
      },
      error: (error) => {
        console.error('Fejl ved oprettelse af eksempel anmodning:', error);
        alert('‚ùå Fejl ved oprettelse. Opret f√∏rst test brugere.');
      }
    });
  }

  viewApiDocs() {
    window.open(`${this.apiUrl}/docs`, '_blank');
  }
}

---
# frontend/src/app/models/approval.model.ts
export interface User {
  id: number;
  email: string;
  name: string;
  role: string;
  department?: string;
  phone?: string;
  is_active: boolean;
  created_at: string;
  last_login?: string;
}

export interface ApprovalRequest {
  id: number;
  title: string;
  description: string;
  category: string;
  priority: 'low' | 'medium' | 'high' | 'urgent';
  status: 'pending' | 'approved' | 'rejected' | 'escalated' | 'cancelled';
  amount?: number;
  currency?: string;
  requester_id: number;
  approver_id: number;
  created_at: string;
  updated_at?: string;
  approved_at?: string;
  due_date?: string;
  reference_number?: string;
  external_reference?: string;
  confidentiality_level: string;
  requester: User;
  approver: User;
  comments: ApprovalComment[];
}

export interface ApprovalComment {
  id: number;
  content: string;
  is_internal: boolean;
  user_id: number;
  created_at: string;
  updated_at?: string;
  user: User;
}

export interface CreateApprovalRequest {
  title: string;
  description: string;
  category: string;
  priority: 'low' | 'medium' | 'high' | 'urgent';
  amount?: number;
  approver_id: number;
  due_date?: string;
  external_reference?: string;
  confidentiality_level?: string;
}

export interface UpdateApprovalRequest {
  status: 'approved' | 'rejected' | 'escalated';
  comment?: string;
  approver_id?: number;
}

export interface ApprovalRequestList {
  requests: ApprovalRequest[];
  total: number;
  page: number;
  per_page: number;
}

export interface ApprovalStats {
  total_requests: number;
  pending_requests: number;
  approved_requests: number;
  rejected_requests: number;
  avg_processing_time_hours: number;
  requests_by_priority: { [key: string]: number };
  requests_by_category: { [key: string]: number };
}

export interface SystemHealth {
  status: string;
  service: string;
  database: string;
  websocket_connections: number;
  timestamp: string;
}

export interface WebSocketStats {
  total_connections: number;
  unique_users: number;
  messages_sent: number;
  role_distribution: { [key: string]: number };
  active_users: number[];
}

export interface WebSocketMessage {
  type: string;
  request_id?: number;
  user_id?: number;
  message: string;
  timestamp: string;
  data?: any;
}

// Utility types
export type PriorityLevel = 'low' | 'medium' | 'high' | 'urgent';
export type ApprovalStatus = 'pending' | 'approved' | 'rejected' | 'escalated' | 'cancelled';
export type UserRole = 'employee' | 'manager' | 'senior_manager' | 'admin';

// API Response wrapper
export interface ApiResponse<T> {
  success: boolean;
  data: T;
  message?: string;
  errors?: string[];
}

// Filter options for API calls
export interface ApprovalFilters {
  skip?: number;
  limit?: number;
  status?: ApprovalStatus;
  priority?: PriorityLevel;
  category?: string;
  approver_id?: number;
  requester_id?: number;
  search?: string;
}

---
# frontend/src/app/services/approval.service.ts
import { Injectable } from '@angular/core';
import { HttpClient, HttpParams, HttpErrorResponse } from '@angular/common/http';
import { Observable, throwError } from 'rxjs';
import { catchError, retry } from 'rxjs/operators';
import { 
  ApprovalRequest, 
  CreateApprovalRequest, 
  UpdateApprovalRequest,
  User, 
  ApprovalRequestList,
  ApprovalStats,
  SystemHealth,
  WebSocketStats,
  ApprovalFilters
} from '../models/approval.model';

@Injectable({
  providedIn: 'root'
})
export class ApprovalService {
  private apiUrl = 'http://localhost:8000';

  constructor(private http: HttpClient) {}

  // Error handling
  private handleError(error: HttpErrorResponse) {
    let errorMessage = 'Der opstod en ukendt fejl';
    
    if (error.error instanceof ErrorEvent) {
      // Client-side error
      errorMessage = `Klient fejl: ${error.error.message}`;
    } else {
      // Server-side error
      switch (error.status) {
        case 400:
          errorMessage = 'Ugyldig anmodning - kontroller dine data';
          break;
        case 401:
          errorMessage = 'Ikke autoriseret - log ind igen';
          break;
        case 403:
          errorMessage = 'Ikke tilladelse til denne handling';
          break;
        case 404:
          errorMessage = 'Ressource ikke fundet';
          break;
        case 422:
          errorMessage = error.error?.detail || 'Valideringsfejl';
          break;
        case 500:
          errorMessage = 'Intern serverfejl - kontakt support';
          break;
        case 503:
          errorMessage = 'Service utilg√¶ngelig - pr√∏v igen senere';
          break;
        default:
          errorMessage = `Server fejl: ${error.status} - ${error.error?.detail || error.message}`;
      }
    }
    
    console.error('API fejl:', error);
    return throwError(() => new Error(errorMessage));
  }

  // System endpoints
  getSystemHealth(): Observable<SystemHealth> {
    return this.http.get<SystemHealth>(`${this.apiUrl}/health`)
      .pipe(
        retry(2),
        catchError(this.handleError)
      );
  }

  getWebSocketStats(): Observable<WebSocketStats> {
    return this.http.get<WebSocketStats>(`${this.apiUrl}/stats/websocket`)
      .pipe(
        catchError(this.handleError)
      );
  }

  getApprovalStats(days: number = 30): Observable<ApprovalStats> {
    const params = new HttpParams().set('days', days.toString());
    return this.http.get<ApprovalStats>(`${this.apiUrl}/stats/`, { params })
      .pipe(
        catchError(this.handleError)
      );
  }

  // User endpoints
  getUsers(): Observable<User[]> {
    return this.http.get<User[]>(`${this.apiUrl}/users/`)
      .pipe(
        catchError(this.handleError)
      );
  }

  getUser(id: number): Observable<User> {
    return this.http.get<User>(`${this.apiUrl}/users/${id}`)
      .pipe(
        catchError(this.handleError)
      );
  }

  createUser(user: Omit<User, 'id' | 'created_at' | 'is_active' | 'last_login'>): Observable<User> {
    return this.http.post<User>(`${this.apiUrl}/users/`, user)
      .pipe(
        catchError(this.handleError)
      );
  }

  createTestUsers(): Observable<any> {
    const testUsers = [
      {
        email: 'manager@gov.dk',
        name: 'Manager Jensen',
        role: 'Manager',
        department: 'Administration'
      },
      {
        email: 'employee@gov.dk',
        name: 'Medarbejder Hansen',
        role: 'Employee',
        department: 'IT'
      }
    ];

    // Create both users
    const requests = testUsers.map(user => this.createUser(user));
    
    // Return a combined observable (simplified for demo)
    return this.createUser(testUsers[0]);
  }

  // Approval Request endpoints
  getApprovalRequests(filters?: ApprovalFilters): Observable<ApprovalRequestList> {
    let params = new HttpParams();
    
    if (filters) {
      Object.keys(filters).forEach(key => {
        const value = filters[key as keyof ApprovalFilters];
        if (value !== undefined && value !== null) {
          params = params.set(key, value.toString());
        }
      });
    }
    
    return this.http.get<ApprovalRequestList>(`${this.apiUrl}/approval-requests/`, { params })
      .pipe(
        catchError(this.handleError)
      );
  }

  getApprovalRequest(id: number): Observable<ApprovalRequest> {
    return this.http.get<ApprovalRequest>(`${this.apiUrl}/approval-requests/${id}`)
      .pipe(
        catchError(this.handleError)
      );
  }

  createApprovalRequest(request: CreateApprovalRequest, requesterId: number): Observable<ApprovalRequest> {
    const params = new HttpParams().set('requester_id', requesterId.toString());
    return this.http.post<ApprovalRequest>(`${this.apiUrl}/approval-requests/`, request, { params })
      .pipe(
        catchError(this.handleError)
      );
  }

  updateApprovalRequest(
    id: number, 
    update: UpdateApprovalRequest, 
    userId: number
  ): Observable<ApprovalRequest> {
    const params = new HttpParams().set('user_id', userId.toString());
    return this.http.put<ApprovalRequest>(`${this.apiUrl}/approval-requests/${id}`, update, { params })
      .pipe(
        catchError(this.handleError)
      );
  }

  // Comment endpoints
  addComment(requestId: number, content: string, userId: number, isInternal: boolean = false): Observable<any> {
    const params = new HttpParams()
      .set('content', content)
      .set('user_id', userId.toString())
      .set('is_internal', isInternal.toString());
    
    return this.http.post(`${this.apiUrl}/approval-requests/${requestId}/comments`, null, { params })
      .pipe(
        catchError(this.handleError)
      );
  }

  // Utility methods
  getPriorityText(priority: string): string {
    const priorityMap: { [key: string]: string } = {
      'low': 'Lav',
      'medium': 'Mellem',
      'high': 'H√∏j',
      'urgent': 'Akut'
    };
    return priorityMap[priority] || priority;
  }

  getStatusText(status: string): string {
    const statusMap: { [key: string]: string } = {
      'pending': 'Afventer',
      'approved': 'Godkendt',
      'rejected': 'Afvist',
      'escalated': 'Eskaleret',
      'cancelled': 'Annulleret'
    };
    return statusMap[status] || status;
  }

  getCategoryText(category: string): string {
    const categoryMap: { [key: string]: string } = {
      'IT': 'IT & Teknologi',
      'Indk√∏b': 'Indk√∏b & Procurement',
      'HR': 'Personal & HR',
      '√òkonomi': '√òkonomi & Budget',
      'Drift': 'Drift & Vedligeholdelse',
      'Andet': 'Andet'
    };
    return categoryMap[category] || category;
  }

  formatAmount(amount: number | undefined, currency: string = 'DKK'): string {
    if (!amount) return '';
    return new Intl.NumberFormat('da-DK', {
      style: 'currency',
      currency: currency
    }).format(amount);
  }

  calculateDaysOverdue(dueDate: string): number {
    const due = new Date(dueDate);
    const now = new Date();
    const diffTime = now.getTime() - due.getTime();
    return Math.ceil(diffTime / (1000 * 60 * 60 * 24));
  }

  isOverdue(dueDate: string | undefined): boolean {
    if (!dueDate) return false;
    return new Date(dueDate) < new Date();
  }
}

---
# frontend/src/app/components/approval-list.component.ts
import { Component, OnInit, Output, EventEmitter } from '@angular/core';
import { ApprovalService } from '../services/approval.service';
import { ApprovalRequest, ApprovalFilters } from '../models/approval.model';

@Component({
  selector: 'app-approval-list',
  template: `
    <div class="approval-list">
      
      <!-- Filters -->
      <div class="filters-container">
        <div class="filters-row">
          <div class="form-group">
            <label class="form-label">Status</label>
            <select [(ngModel)]="filters.status" (change)="onFilterChange()" class="form-control">
              <option value="">Alle statuser</option>
              <option value="pending">Afventer</option>
              <option value="approved">Godkendt</option>
              <option value="rejected">Afvist</option>
              <option value="escalated">Eskaleret</option>
            </select>
          </div>

          <div class="form-group">
            <label class="form-label">Prioritet</label>
            <select [(ngModel)]="filters.priority" (change)="onFilterChange()" class="form-control">
              <option value="">Alle prioriteter</option>
              <option value="urgent">Akut</option>
              <option value="high">H√∏j</option>
              <option value="medium">Mellem</option>
              <option value="low">Lav</option>
            </select>
          </div>

          <div class="form-group">
            <label class="form-label">Kategori</label>
            <select [(ngModel)]="filters.category" (change)="onFilterChange()" class="form-control">
              <option value="">Alle kategorier</option>
              <option value="IT">IT & Teknologi</option>
              <option value="Indk√∏b">Indk√∏b</option>
              <option value="HR">Personal & HR</option>
              <option value="√òkonomi">√òkonomi</option>
              <option value="Drift">Drift & Vedligeholdelse</option>
              <option value="Andet">Andet</option>
            </select>
          </div>

          <div class="form-group">
            <label class="form-label">S√∏g</label>
            <input 
              type="text" 
              [(ngModel)]="filters.search" 
              (input)="onSearchChange()"
              placeholder="S√∏g i titel, beskrivelse..."
              class="form-control">
          </div>
        </div>
      </div>

      <!-- Loading state -->
      <div *ngIf="loading" class="loading">
        <div class="spinner"></div>
        <p>Indl√¶ser anmodninger...</p>
      </div>

      <!-- Empty state -->
      <div *ngIf="!loading && requests.length === 0" class="card">
        <div class="card-body text-center">
          <h3>üì≠ Ingen anmodninger fundet</h3>
          <p>Der er ingen godkendelsesanmodninger der matcher dine filtre.</p>
          <button class="btn btn-primary" (click)="clearFilters()">
            üîÑ Nulstil filtre
          </button>
        </div>
      </div>

      <!-- Approval requests grid -->
      <div class="approval-grid" *ngIf="!loading && requests.length > 0">
        <div *ngFor="let request of requests" 
             class="card approval-card" 
             [class]="'priority-' + request.priority"
             [class.overdue]="isOverdue(request.due_date)">
          
          <!-- Card Header -->
          <div class="card-header">
            <div class="header-main">
              <h3 class="card-title">{{ request.title }}</h3>
              <small class="